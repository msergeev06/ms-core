MSergeev\Core\Entity\BooleanField($name, $parameters = array())
	Класс служит для описания колонок таблиц в DB. В качестве параметра $name передается название колонки таблицы, в качестве $parameters передаются дополнительные
	параметры:
	values - набор возможных значений в виде массива. По-умолчанию: array(false,true);

	$this->normalizeValue(boolean|integer|string $value) - функция конвертирует значение $value в true/false (return boolean)
	$this->getValues() - функция возвращает набор возможных значений объекта. По-умолчанию: array(false, true) (return array)
	$this->getSize() - функция возвращает размер поля varchar в DB. По-умолчанию: 1 (return integer)
	$this->getDefaultValueDB() - функция возвращает значение по-умолчанию для данных DB. По-умолчанию: 'N' (return string)
	$this->saveDataModification(boolean $value) - функция подготавливает данные для сохранения в DB, конвертируя из значений true/false в Y/N.
												Перед подготовкой данных для них запускается функция $this->normalizeValue($value). (return string)
	$this->fetchDataModification(string $value) - функция преобразовывает данные из строкового вида в boolean. Фактически вызывает для $value функцию
												$this->normalizeValue($value). (return boolean)

MSergeev\Core\Entity\Date(mixed $date=null, string $type=null)
	Класс служит для работы с Датой. Позволяет производить необходимые изменения даты и конвертацию в различные форматы. Обе переменных можно опустить. В переменной $date должна
	передаваться дата в одном из форматов, в переменной $type задается тип формата переданной даты (возможные типы: 'time', 'db', 'site'). Если параметр $type не был передан,
	либо не равен ни одному из ожидаемых типов - считается что дата передается в формате 'time'.
	Типы даты:
		'time' - время в формате php функции time() (UNIX time: количество секунд, прошедших с 1 января 1970 года)
		'db' - дата в формате DB (YYYY-MM-DD, date("Y-m-d"))
		'site' - дата в формате сайта (DD.MM.YYYY, date("d.m.Y"))
	При создании экземпляра класса, переданная дата конфертируется и храниться в формате 'time'

	$this->getTimestamp () - Функция возвращает дату в UNIX-формате (return integer)
	$this->getDate (string $format="Y-m-d") - Функция возвращает дату в указанном формате. Указываемый формат аналогичен формату php-функции date(). По-умолчанию формат даты YYYY-MM-DD или
											date("Y-m-d"). (return string)
	$this->getDateDB () - Функция возвращает дату в формате DB (YYYY-MM-DD, date("Y-m-d")). (return string)
	static::getDateTimestamp($format="Y-m-d", $timestamp=null) - Статическая функция. Возвращает метку времени (по-умолчанию: текущее время) в указанном формате (по-умолчанию: "Y-m-d").
																В переменной $format передается формат даты, аналогичный php-функции date(). (return string)
	static::getDateDBTimestamp ($timestamp=null) - Статическая функция. Возвращает метку времени (по-умолчанию: текущее время) в формате DB (YYYY-MM-DD, date("Y-m-d")). (return string)


MSergeev\Core\Entity\DateField($name, $parameters = array())
	Класс служит для описания колонок таблиц в DB. В качестве параметра $name передается название колонки таблицы, в качестве $parameters передаются дополнительные
	параметры (см. MSergeev\Core\Entity\ScalarField).

	$this->saveDataModification($value) - Функция преобразовывает дату из формата сайта в формат DB. Перед преобразованием $value вызывается функция $this->validate($value), проверяющая
										правильность передаваемого формата даты. (return string)
	$this->fetchDataModification($value) - Функция преобразовывает дату из формата DB в формат сайта. (return string)

MSergeev\Core\Entity\DatetimeField($name, $parameters = array())
	Класс служит для описания колонок таблиц в DB. В качестве параметра $name передается название колонки таблицы, в качестве $parameters передаются дополнительные
	параметры (см. MSergeev\Core\Entity\DateField).
	КЛАСС В РАЗРАБОТКЕ

MSergeev\Core\Entity\EnumField($name, $parameters = array())
	Класс служит для описания колонок таблиц в DB. В качестве параметра $name передается название колонки таблицы, в качестве $parameters передаются дополнительные
	параметры (см. MSergeev\Core\Entity\ScalarField).
	КЛАСС В РАЗРАБОТКЕ

MSergeev\Core\Entity\ExpressionField($name, $parameters = array())
	Класс служит для описания колонок таблиц в DB. В качестве параметра $name передается название колонки таблицы, в качестве $parameters передаются дополнительные
	параметры (см. MSergeev\Core\Entity\ScalarField).
	КЛАСС В РАЗРАБОТКЕ

MSergeev\Core\Entity\FloatField($name, $parameters = array())
	Класс служит для описания колонок таблиц в DB. В качестве параметра $name передается название колонки таблицы, в качестве $parameters передаются дополнительные
	параметры:
	scale - точность (количество знаков после запятой). По-умолчанию, равно 2.

	$this->getScale() - возвращает точность значения (количество знаков после запятой) (return integer)

MSergeev\Core\Entity\IntegerField($name, $parameters = array())
	Класс служит для описания колонок таблиц в DB. В качестве параметра $name передается название колонки таблицы, в качестве $parameters передаются дополнительные
	параметры:
	size - размер значения int колонки таблицы DB. По-умолчанию, равно 10, что означает, что у колонки таблицы тип значения будет int(10)

	$this->getSize() - возвращает размер значения int колонки таблицы DB. (return integer)
	$this->saveDataModification($value) - функция преобразует значения $value для сохранения их в DB. (return mixed)
	$this->fetchDataModification($value) - функция преобразует значения $value, полученные из DB. (return mixed)

MSergeev\Core\Entity\ReferenceField($name, $parameters = array())
	Класс служит для описания колонок таблиц в DB. В качестве параметра $name передается название колонки таблицы, в качестве $parameters передаются дополнительные
	параметры.
	КЛАСС В РАЗРАБОТКЕ

MSergeev\Core\Entity\StringField($name, $parameters = array())
	Класс служит для описания колонок таблиц в DB. В качестве параметра $name передается название колонки таблицы, в качестве $parameters передаются дополнительные
	параметры:
	size - размер значения varchar колонки таблицы DB. По-умолчанию, равно 255, что означает, что у колонки таблицы тип значения будет varchar(255)

	$this->getSize() - возвращает размер значения varchar колонки таблицы DB. (return integer)

MSergeev\Core\Entity\TextField($name, $parameters = array())
	Класс служит для описания колонок таблиц в DB. В качестве параметра $name передается название колонки таблицы, в качестве $parameters передаются дополнительные
	параметры.

MSergeev\Core\Entity\ScalarField($name, $parameters = array()) - НЕ БУДЕТ ОПИСАН. ВЗЯТЫ ТОЛЬКО ФУНКЦИИ
	Переменная $name - имя колонки DB
	Переменная $parameters - параметры:
	primary - флаг true|false - является ли поле PRIMARY KEY в DB. Если параметер не передан, считается что установлен false
	unique - флаг true|false - должны ли быть значения в DB уникальными. Не требуется указывать для полей, для которых уже указан primary=true. Если параметер не передан,
		считается что установлен false
	required - флаг true|false - обязательно ли значение в данном поле. Не требуется указывать для полей, для которых уже указан primary=true. Если данный флаг установлен,
		но значение не было задано, будут попытки установить значение по умолчанию. Если попытки автоматически установить значение не будут успешными - будет выдана ошибка.
		Если параметер не передан, считается что установлен false
	autocomplete - флаг true|false - чаще всего указывается для поля с primary=true. Означает, что значения для поля будут инкрементится автоматически.
	column_name - если параметер задан, то имя поля в DB будет таким, как указано здесь, но в коде к нему все равно необходимо обращаться по значению, указанному в переменной $name
	default_value - значение по умолчанию. Здесь может быть указано непосредственно значение по-умолчанию, либо функция, которая будет генерировать значение по-умолчанию
	run - нет описания

	$this->isPrimary() - возвращает значение флага primary. (return boolean)
	$this->isUnique() - возвращает значение флага unique. (return boolean)
	$this->isRequired() - возвращает значение флага required. (return boolean)
	$this->isAutocomplete() - возвращает значение флага autocomplete (return boolean)
	$this->getColumnName() - возвращает имя колонки DB
	$this->getRun() - нет описания
	$this->setColumnName($column_name) - устанавливает значение имени колонки равному $column_name. Не возвращает ничего.
	$this->getDefaultValue() - возвращает значение по-умолчанию. Если было задано не значение, а имя функции - пытается выполнить функцию и вернуть ее значение. (return mixed)
	$this->saveDataModification($value) - функция преобразует значения $value для сохранения их в DB. (return mixed)
	$this->fetchDataModification($value) - функция преобразует значения $value, полученные из DB. (return mixed)
	$this->validate($value) - проверяет в правильном ли формате переданное значение. (return mixed)

MSergeev\Core\Entity\Field($name, $parameters = array()) - НЕ БУДЕТ ОПИСАН. ВЗЯТЫ ТОЛЬКО ФУНКЦИИ
	Переменная $name - имя колонки DB
	Переменная $parameters - параметры:
	title - Описание колонки в DB
	link - связь колонки с другой колонкой другой таблицы. Формат имя_таблицы.имя_колонки. Требуется, когда значение колонки является, например, ID в другой таблице
	fetch_data_modification - имя функции, выполняющейся при получении данных из DB. Функция будет вызвана ПОСЛЕ вызова стандартных функций обработки значений, полученных из DB
	save_data_modification - имя функции, выполняющейся перед сохранением данных в DB. Функция будет вызвана ПЕРЕД вызовом стандартных функций обработки значений, при сохранении данных в DB
	serialized - принимает значения true|false. Флаг, обозначающий, что при сохранении данных в DB данный должны быть сериализованы, а при получении данных из DB - десериализованы.
	parent - нет описания

	$this->getName() - возвращает имя колонки таблицы DB. (return string)
	$this->getTitle() - возвращает описание колонки таблицы DB (return string)
	$this->getDataType() - возвращает тип данных колонки таблицы DB. Возвращается тип, под которым данные хранятся в DB (return string)
	$this->getFieldType() - возвращает тип данных поля. Возвращается тип, под которым данные обрабатываются php (return string)
	$this->getParentField() - нет описания
	$this->getLink() - возвращается связь колонки с другой колонкой другой таблицы. Формат имя_таблицы.имя_колонки. (return string)
	$this->serialize($value) - сериализирует $value. (return string)
	$this->unserialize($value) - десериализирует $value. (return mixed)
	$this->isSerialized() - проверяет, необходимо ли сериализировать данные. (return true|false)
	$this->getFetchDataModification() - возвращает имя функции, которую необходимо выполнить при получении данных из DB. (return string)
	$this->getSaveDataModification() - возвращает имя функции, которую необходимо выполнить перед сохранением данных в DB. (return string)

MSergeev\Core\Entity\Query($type)
	Класс служит для создания, построения и обработки запросов к DB. Это основной класс-прослойка для составления запросов к DB. В параметре $type обязательно должен передаваться тип запроса:
	select - для любых SELECT запросов
	insert - для INSERT запросов
	update - для UPDATE запросов
	delete - для DELETE запросов
	В зависимости от указанного типа необходимо передать дополнительные параметры перед выполнением запроса.

	$this->getFieldsEntity() - нет описания
	$this->setType($type) - устанавливает $type тип объекта
	$this->getType() - возвращает тип объекта. (return string)
	$this->setSelect($select) - устанавливает значения SELECT
	$this->getSelect() - возвращает значения SELECT. (return mixed)
	$this->setTableName($tableName) - устанавливает $tableName (название) таблицы DB, к которой будет происходить запрос
	$this->getTableName() - возвращает название таблицы DB. (return string)
	$this->setPrimaryKey($key) - устанавливает $key (поле PRIMARY) для таблицы DB
	$this->getPrimaryKey() - возвращает поле PRIMARY для таблицы DB (return string)
	$this->setTableMap($arMap) - устанавливает $arMap - карту (массив объектов полей) таблицы DB
	$this->getTableMap() - возвращает карту (массив объектов полей) таблицы DB
	$this->setFilter($filter) - устанавливает $filter - фильтр для запроса. НЕ ЗАКОНЧЕНО ОПИСАНИЕ
	$this->getFilter() - возвращает фильтр для запроса. НЕ ЗАКОНЧЕНО ОПИСАНИЕ
	$this->setFilterLogic($logic="AND") - устанавливает логику для фильтра WHERE. Если значение не задано, используется AND
	$this->getFilterLogic() - возвращает логику для фильтра WHERE (return string)
	$this->setWhere($where=array()) - устанавливает $where. НЕ ЗАКОНЧЕНО ОПИСАНИЕ
	$this->getWhere() - возвращает where. НЕ ЗАКОНЧЕНО ОПИСАНИЕ
	$this->setGroup($group) - нет описания
	$this->getGroup() - нет описания
	$this->setOrder($order, $by = "ASC") - устанавливает сортировку для запроса. В переменной $order должно передаваться название поля для сортировки, а в параметре $by - направление
		сортировки: "ASC" - по-возростанию, "DESC" - по-убыванию. Если $by (направление сортировки) не указано, используется по-умолчанию "ASC" (по-возростанию)
	$this->getOrder() - возвращается настройки по сортировке запроса. НЕ ЗАКОНЧЕНО ОПИСАНИЕ
	$this->setLimit($limit) - установить $limit (лимит) возвращаемых записей запроса
	$this->getLimit() - возвращает установленный лимит возвращаемых записей запроса (return integer)
	$this->setOffset($offset) - установить $offset (смещение) возвращаемых записей запроса. Используется совместно с $limit.
	$this->getOffset() - возвращает значение смещения возвращаемых записей запроса.
	$this->setRuntime() - нет описания
	$this->getRuntime() - нет описания
	$this->setQueryBuildParts($sql) - устанавливает собранный запрос к DB. Этот запрос будет передан в DB. Т.о. с помощью данной функции можно создать кастомный запрос к базе данных,
		не используя при этом остальные методы класса, для создания запроса. Это применяется при совершении запросов, не поддерживаемых API
	$this->getQueryBuildParts() - возвращает собранный запрос к DB. Этот запрос будет передан в DB. (return string)
	$this->setInsertArray($array) - устанавливает массив значений, которые будут добавлены в таблицу при INSERT запросе
	$this->getInsertArray() - возвращает массив значений, которые будут добавлены в таблицу при INSERT запросе
	$this->setAutoIncrement($autoI) - нет описания
	$this->getAutoIncrement() - нет описания
	$this->setTableAliasPostfix($alias) - нет описания
	$this->getTableAliasPostfix() - нет описания
	$this->setUpdateArray($array) - устанавливает массив значений, которые будут обновлены в таблице при UPDATE запросе
	$this->getUpdateArray() - возвращает массив значений, которые будут обновлены в таблице при UPDATE запросе
	$this->setUpdatePrimary($primary) - устанавливает значение $primary поля строки, для которой будет применен UPDATE запрос
	$this->getUpdatePrimary() - возвращает значение primary поля строки, для которой будет применен UPDATE запрос
	$this->setDeletePrimary($primary) - устанавливает значение $primary поля строки, для которой бедет применен DELETE запрос
	$this->getDeletePrimary() - возвращает значение primary поля строки, для которой будет применен DELETE запрос
	$this->setDeleteConfirm($confirm=false) - нет описания
	$this->getDeleteConfirm() - нет описания
	$this->setTableLinks($arLinks) - задает массив $arLinks таблиц и полей привязанных к полям текущей таблицы
	$this->getTableLinks() - возвращает массив таблиц и полей, привязанных к полям текущей таблицы
	$this->exec() - выполняет SQL запрос к DB. Необходимо вызывать только после установки всех необходимых параметров в объекте.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

MSergeev\Core\Lib\Buffer
	Служит для управления буфером вывода данных в браузер.
	В РАЗРАБОТКЕ

MSergeev\Core\Lib\Calendar
	В РАЗРАБОТКЕ

MSergeev\Core\Lib\Config
	Класс служит для создания и получения конфигурационной информации

	static::init($arConfig=array()) - инициализирует конфиг. Если $arConfig не пустой, данные из него берутся для первоначальной инициализации конфига.
	static::addConfig($name, $value) - добавляет информацию в конфиг, переменная $name задает название конфига, переменная $value - значение. $name преобразуется к верхнему регистру
	static::getConfig($name) - получает данные из конфига. $name - название получаемого конфига, преобразуется к верхнему регистру

MSergeev\Core\Lib\DBResult($res, Query $obQuery)
	Класс обработки результата запроса к DB. $res - результат запроса к DB, $obQuery - объект класса Query.

	$this->fetch() - извлечение результатов запроса к DB. Если запрос к DB был 'select', результат разбирается на массив значений, в котором все полученные значения обрабатываются с
		использованием функции fetchDataModification(), если запрос к DB был не 'select' - возвращается результат запроса к DB без преобразований. (return mixed)

	$this->getNumRows() - возвращает количество затронутых рядов select-запросом. (return integer)
	$this->getNumFields() - возвращает количество затронутых полей select-запросом. (return integer)
	$this->getLastRes() - возвращает предыдущий результат запроса к DB. (return object)
	$this->getLastResult() - возвращает предыдущий результат запроса к DB, преобразованный в массив (return array)
	$this->getResult() - возвращает последний результат запроса к DB, преобразованный в массив (return array)
	$this->setResultErrorNumber($number) - установить $number (номер) ошибки запроса к DB
	$this->getResultErrorNumber() - возвращает номер ошибки запроса к DB (return mixed)
	$this->setResultErrorText($text) - установить $text (текст) ошибки запроса к DB
	$this->getResultErrorText() - возвращает текст ошибки запроса к DB (return string)
	$this->setAffectedRows($data) - устанавливает количество затронутых рядов для запроса к DB
	$this->getAffectedRows() - возвращает количество затронутых рядов для запроса к DB. (return integer)
	$this->setInsertId($data) - установить ID добавленного значения
	$this->getInsertId() - возвращает значение ID добавленного значения
	$this->setNumFields($data) - установить количество полей.

MSergeev\Core\Lib\DataBase()
	Класс для работы с DB. При создании объекта класса, создается подключение к DB. Далее через объект Query вызывается единственная функция класса query для осуществления запроса к DB
		и создания объекта класса DBResult

	$this->query(Query $obQuery) - функция принимает объект класса Query и производит запрос к DB, возвращая значение в виде объекта класса DBResult

MSergeev\Core\Lib\DataManager()
	Класс служит базой для описания классов Таблиц DB. Класс содержит в себе основные функции управления таблицами. Основные описательные функции должны быть переопределены в классе
		таблиц. Остальные же служат для облегчения внедрения новых таблиц ядра и пакетов приложений











